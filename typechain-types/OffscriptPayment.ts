/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OffscriptPaymentInterface extends utils.Interface {
  functions: {
    "_dai()": FunctionFragment;
    "_usdc()": FunctionFragment;
    "_usdt()": FunctionFragment;
    "checkForNft(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "payWithDai()": FunctionFragment;
    "payWithEth()": FunctionFragment;
    "payWithUsdc()": FunctionFragment;
    "payWithUsdt()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_dai", values?: undefined): string;
  encodeFunctionData(functionFragment: "_usdc", values?: undefined): string;
  encodeFunctionData(functionFragment: "_usdt", values?: undefined): string;
  encodeFunctionData(functionFragment: "checkForNft", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payWithDai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payWithEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payWithUsdc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payWithUsdt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "_dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_usdt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkForNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payWithDai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payWithEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payWithUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payWithUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Payment(address,uint256,uint256,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payment"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PaymentEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber],
  {
    payer: string;
    amount: BigNumber;
    paymentId: BigNumber;
    paymentMethod: string;
    date: BigNumber;
  }
>;

export type PaymentEventFilter = TypedEventFilter<PaymentEvent>;

export interface OffscriptPayment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OffscriptPaymentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _dai(overrides?: CallOverrides): Promise<[string]>;

    _usdc(overrides?: CallOverrides): Promise<[string]>;

    _usdt(overrides?: CallOverrides): Promise<[string]>;

    checkForNft(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payWithDai(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payWithEth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payWithUsdc(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payWithUsdt(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _dai(overrides?: CallOverrides): Promise<string>;

  _usdc(overrides?: CallOverrides): Promise<string>;

  _usdt(overrides?: CallOverrides): Promise<string>;

  checkForNft(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payWithDai(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payWithEth(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payWithUsdc(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payWithUsdt(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _dai(overrides?: CallOverrides): Promise<string>;

    _usdc(overrides?: CallOverrides): Promise<string>;

    _usdt(overrides?: CallOverrides): Promise<string>;

    checkForNft(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    payWithDai(overrides?: CallOverrides): Promise<void>;

    payWithEth(overrides?: CallOverrides): Promise<void>;

    payWithUsdc(overrides?: CallOverrides): Promise<void>;

    payWithUsdt(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Payment(address,uint256,uint256,string,uint256)"(
      payer?: null,
      amount?: null,
      paymentId?: null,
      paymentMethod?: null,
      date?: null
    ): PaymentEventFilter;
    Payment(
      payer?: null,
      amount?: null,
      paymentId?: null,
      paymentMethod?: null,
      date?: null
    ): PaymentEventFilter;
  };

  estimateGas: {
    _dai(overrides?: CallOverrides): Promise<BigNumber>;

    _usdc(overrides?: CallOverrides): Promise<BigNumber>;

    _usdt(overrides?: CallOverrides): Promise<BigNumber>;

    checkForNft(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payWithDai(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payWithEth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payWithUsdc(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payWithUsdt(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _usdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkForNft(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payWithDai(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payWithEth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payWithUsdc(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payWithUsdt(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
